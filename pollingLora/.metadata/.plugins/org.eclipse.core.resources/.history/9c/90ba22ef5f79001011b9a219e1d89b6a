/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
// Bu satır, projenin başka yerlerinde tanımlanan SPI1 yapılandırmasını
// bu dosyada kullanabilmemizi sağlar. CubeIDE bunu otomatik oluşturur.
extern SPI_HandleTypeDef hspi1;
/* USER CODE END PV */

/* Private defines -----------------------------------------------------------*/
/* USER CODE BEGIN PD */
// Bu tanımlamalar, RFM98W modülünün (içindeki SX1278 çipi) datasheet'inden alınmıştır.
// Karmaşık register adreslerini ezberlemek yerine onlara isim vererek kod okunabilirliğini artırırız.

// RFM98W Register Adresleri
#define REG_VERSION              0x42 // Versiyon bilgisi için
#define REG_OP_MODE              0x01 // Çalışma modunu ayarlamak için
#define REG_FRF_MSB              0x06 // Frekans ayarı (En anlamlı byte)
#define REG_FRF_MID              0x07 // Frekans ayarı (Orta byte)
#define REG_FRF_LSB              0x08 // Frekans ayarı (En anlamsız byte)
#define REG_DIO_MAPPING_1        0x40 // DIO pinlerinin görevlerini atamak için

// RFM98W Çalışma Modları
#define MODE_SLEEP               0x80 // Uyku modu (LoRa modunda)
#define MODE_STDBY               0x81 // Bekleme modu (LoRa modunda)
#define MODE_TX                  0x83 // Gönderme modu (LoRa modunda)
#define MODE_RX_CONTINUOUS       0x85 // Sürekli dinleme modu (LoRa modunda)






void RFM98_Reset()
{
  // Reset pinini 1ms boyunca LOW'a çek
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
  HAL_Delay(1);
  // Reset pinini HIGH'a çekerek modülün normal çalışmasına izin ver
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
  HAL_Delay(5); // Modülün kendine gelmesi için kısa bir bekleme
}


void RFM98_Write(uint8_t address, uint8_t value)
{
  // Yazma işlemi için adresin en anlamlı bitini (MSB) 1 yapmamız gerekiyor.
  // Bu, SX1278 datasheet'inde belirtilen bir kuraldır.
  uint8_t write_address = address | 0x80;

  // 1. NSS pinini LOW'a çekerek LoRa modülüyle haberleşmeyi başlat.
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);

  // 2. Önce yazılacak register'ın adresini gönder.
  HAL_SPI_Transmit(&hspi1, &write_address, 1, HAL_MAX_DELAY);

  // 3. Sonra o adrese yazılacak veriyi gönder.
  HAL_SPI_Transmit(&hspi1, &value, 1, HAL_MAX_DELAY);

  // 4. NSS pinini HIGH'a çekerek haberleşmeyi sonlandır.
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
}








uint8_t RFM98_Read(uint8_t address)
{
  // Okuma işlemi için adresin en anlamlı bitini (MSB) 0 yapmamız gerekiyor.
  // Bu, SX1278 datasheet'inde belirtilen bir kuraldır.
  uint8_t read_address = address & 0x7F;
  uint8_t received_data;

  // 1. NSS pinini LOW'a çekerek LoRa modülüyle haberleşmeyi başlat.
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);

  // 2. Önce okunacak register'ın adresini gönder.
  HAL_SPI_Transmit(&hspi1, &read_address, 1, HAL_MAX_DELAY);

  // 3. Veriyi okumak için STM32'den anlamsız bir veri (0x00) gönderilir.
  //    Bu gönderim sırasında MISO hattından gelen veri okunur.
  HAL_SPI_Receive(&hspi1, &received_data, 1, HAL_MAX_DELAY);

  // 4. NSS pinini HIGH'a çekerek haberleşmeyi sonlandır.
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);

  return received_data;
}







/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */





  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);


  RFM98_Reset();


  // SPI haberleşmesini test etmek için modülün versiyon register'ını okuyalım.
    // SX1278 çipi için bu değerin 0x12 olması gerekir.
    uint8_t version = RFM98_Read(REG_VERSION);















      	 int a = 0;
      // Eğer versiyon doğru ise (haberleşme başarılı ise)
      if (version == 0x12)
      {
        // Başarının bir göstergesi olarak DEBUG_LED'i 1 saniye aralıklarla yakıp söndür.
        // Buradaki DEBUG_LED_... isimleri, .ioc dosyasında PB4 pinine verdiğiniz
        // DEBUG_LED etiketinden otomatik olarak türetilmiştir. [cite: 27]
        while(1) // Sonsuz döngüde LED yak söndür.
        {
         a =1;
        }
      }
      else // Eğer yanlış bir değer okunursa (haberleşme başarısız ise)
      {
        // Hatanın bir göstergesi olarak DEBUG_LED'i sürekli AÇIK bırak.
        a = 9999;
      }




  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_RESET_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LORA_RESET_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_RESET_Pin|LORA_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
